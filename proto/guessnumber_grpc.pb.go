// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GuessNumberGameClient is the client API for GuessNumberGame service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GuessNumberGameClient interface {
	// send a request for joining game
	JoinGame(ctx context.Context, in *JoinGameRequest, opts ...grpc.CallOption) (*JoinGameAnswer, error)
	// guess a number ,then server respone a hint
	GuessNumberRight(ctx context.Context, in *GuessNumber, opts ...grpc.CallOption) (*GuessNumberHint, error)
}

type guessNumberGameClient struct {
	cc grpc.ClientConnInterface
}

func NewGuessNumberGameClient(cc grpc.ClientConnInterface) GuessNumberGameClient {
	return &guessNumberGameClient{cc}
}

func (c *guessNumberGameClient) JoinGame(ctx context.Context, in *JoinGameRequest, opts ...grpc.CallOption) (*JoinGameAnswer, error) {
	out := new(JoinGameAnswer)
	err := c.cc.Invoke(ctx, "/GuessNumberGame/JoinGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guessNumberGameClient) GuessNumberRight(ctx context.Context, in *GuessNumber, opts ...grpc.CallOption) (*GuessNumberHint, error) {
	out := new(GuessNumberHint)
	err := c.cc.Invoke(ctx, "/GuessNumberGame/GuessNumberRight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GuessNumberGameServer is the server API for GuessNumberGame service.
// All implementations must embed UnimplementedGuessNumberGameServer
// for forward compatibility
type GuessNumberGameServer interface {
	// send a request for joining game
	JoinGame(context.Context, *JoinGameRequest) (*JoinGameAnswer, error)
	// guess a number ,then server respone a hint
	GuessNumberRight(context.Context, *GuessNumber) (*GuessNumberHint, error)
	mustEmbedUnimplementedGuessNumberGameServer()
}

// UnimplementedGuessNumberGameServer must be embedded to have forward compatible implementations.
type UnimplementedGuessNumberGameServer struct {
}

func (UnimplementedGuessNumberGameServer) JoinGame(context.Context, *JoinGameRequest) (*JoinGameAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGame not implemented")
}
func (UnimplementedGuessNumberGameServer) GuessNumberRight(context.Context, *GuessNumber) (*GuessNumberHint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuessNumberRight not implemented")
}
func (UnimplementedGuessNumberGameServer) mustEmbedUnimplementedGuessNumberGameServer() {}

// UnsafeGuessNumberGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GuessNumberGameServer will
// result in compilation errors.
type UnsafeGuessNumberGameServer interface {
	mustEmbedUnimplementedGuessNumberGameServer()
}

func RegisterGuessNumberGameServer(s grpc.ServiceRegistrar, srv GuessNumberGameServer) {
	s.RegisterService(&GuessNumberGame_ServiceDesc, srv)
}

func _GuessNumberGame_JoinGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuessNumberGameServer).JoinGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GuessNumberGame/JoinGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuessNumberGameServer).JoinGame(ctx, req.(*JoinGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuessNumberGame_GuessNumberRight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuessNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuessNumberGameServer).GuessNumberRight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GuessNumberGame/GuessNumberRight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuessNumberGameServer).GuessNumberRight(ctx, req.(*GuessNumber))
	}
	return interceptor(ctx, in, info, handler)
}

// GuessNumberGame_ServiceDesc is the grpc.ServiceDesc for GuessNumberGame service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GuessNumberGame_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GuessNumberGame",
	HandlerType: (*GuessNumberGameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinGame",
			Handler:    _GuessNumberGame_JoinGame_Handler,
		},
		{
			MethodName: "GuessNumberRight",
			Handler:    _GuessNumberGame_GuessNumberRight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/guessnumber.proto",
}
